//!
//! Telemetry histograms.
//!
//! In future versions, this file may be generated by a
//! Histograms.json, as in Gecko. Or maybe it will be the opposite and
//! Histograms.json will be generated from this file.
//!

use std::sync::Arc;
use std::sync::mpsc::channel;

extern crate telemetry;
pub use self::telemetry::Service;
pub use self::telemetry::plain::*;

extern crate atomic_cell;
pub use self::atomic_cell::StaticCell;
pub use self::atomic_cell::CleanGuard;

///
/// The shared instance of the telemetry service.
///
pub static TELEMETRY: StaticCell<Arc<Service>> = StaticCell::new();

pub fn init(is_active: bool) -> CleanGuard<'static>{
    TELEMETRY.init(Arc::new(Service::new(is_active)))
}
pub fn dump() {
    let service = TELEMETRY.get().unwrap();
    let (sender, receiver) = channel();

    // Collect plain histograms
    service.to_json(telemetry::Subset::AllPlain, telemetry::SerializationFormat::SimpleJson, sender.clone());
    let plain = receiver.recv().unwrap();

    // Collect keyed histograms
    service.to_json(telemetry::Subset::AllKeyed, telemetry::SerializationFormat::SimpleJson, sender.clone());
    let keyed = receiver.recv().unwrap();

    print!("{}\n", plain.pretty());
    print!("{}\n", keyed.pretty());
}
